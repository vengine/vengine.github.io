#version 150
 ///uniform///
uniform float BlurryRadius;
uniform sampler2D tex0;
uniform vec2 tex0Res;
uniform vec3 DirectionLight0_Dir;
uniform vec3 DirectionLight0_Pos;
uniform vec4 DirectionLight0_Color;
uniform float DirectionLight0_AtteCoef;
uniform vec3 DirectionLight0_Weight;
uniform float DirectionLight0_Influence;
uniform sampler2D DirectionLight0_ShadowTexture;
uniform mat4 DirectionLight0_WorldMatrix;
uniform mat4 DirectionLight0_ProjMatrix;
uniform vec3 SpotLight0_Dir;
uniform vec4 SpotLight0_Color;
uniform float SpotLight0_AtteCoef;
uniform float SpotLight0_OuterCosHalfAngle;
uniform float SpotLight0_InnerCosHalfAngle;
uniform vec3 SpotLight0_Pos;
uniform vec3 SpotLight0_Weight;
uniform float SpotLight0_Influence;
uniform sampler2D SpotLight0_ShadowTexture;
uniform mat4 SpotLight0_WorldMatrix;
uniform mat4 SpotLight0_ProjMatrix;
uniform vec4 PointLight0_Color;
uniform float PointLight0_AtteCoef;
uniform vec3 PointLight0_Pos;
uniform vec3 PointLight0_Weight;
uniform float PointLight0_Influence;
uniform samplerCube PointLight0_ShadowTexture;
uniform vec3 EyePos;
///varying///
in vec2 vTexCoord0;
in vec3 vNormal;
in vec3 vBinormal;
in vec3 vTangent;
in vec4 vPosition;
in vec4 vProjPosition;
///const///
const float Gaussian3x3Const[9] = float[](0.011344,0.083820,0.011344,0.083820,0.619347,0.083820,0.011344,0.083820,0.011344);
const float Gaussian5x5Const[25] = float[](0.002969,0.013306,0.021938,0.013306,0.002969,0.013306,0.059634,0.098320,0.059634,0.013306,0.021938,0.098320,0.162103,0.098320,0.021938,0.013306,0.059634,0.098320,0.059634,0.013306,0.002969,0.013306,0.021938,0.013306,0.002969);
const float Gaussian7x7Const[49] = float[](0.001342,0.004077,0.007940,0.009916,0.007940,0.004077,0.001342,0.004077,0.012383,0.024120,0.030122,0.024120,0.012383,0.004077,0.007940,0.024120,0.046979,0.058669,0.046979,0.024120,0.007940,0.009916,0.030122,0.058669,0.073269,0.058669,0.030122,0.009916,0.007940,0.024120,0.046979,0.058669,0.046979,0.024120,0.007940,0.004077,0.012383,0.024120,0.030122,0.024120,0.012383,0.004077,0.001342,0.004077,0.007940,0.009916,0.007940,0.004077,0.001342);
const float Gaussian9x9Const[81] = float[](0.000763,0.001831,0.003422,0.004978,0.005641,0.004978,0.003422,0.001831,0.000763,0.001831,0.004393,0.008208,0.011942,0.013532,0.011942,0.008208,0.004393,0.001831,0.003422,0.008208,0.015334,0.022311,0.025282,0.022311,0.015334,0.008208,0.003422,0.004978,0.011942,0.022311,0.032463,0.036785,0.032463,0.022311,0.011942,0.004978,0.005641,0.013532,0.025282,0.036785,0.041683,0.036785,0.025282,0.013532,0.005641,0.004978,0.011942,0.022311,0.032463,0.036785,0.032463,0.022311,0.011942,0.004978,0.003422,0.008208,0.015334,0.022311,0.025282,0.022311,0.015334,0.008208,0.003422,0.001831,0.004393,0.008208,0.011942,0.013532,0.011942,0.008208,0.004393,0.001831,0.000763,0.001831,0.003422,0.004978,0.005641,0.004978,0.003422,0.001831,0.000763);
const float Gaussian11x11Const[121] = float[](0.000492,0.001012,0.001771,0.002642,0.003359,0.003639,0.003359,0.002642,0.001771,0.001012,0.000492,0.001012,0.002078,0.003639,0.005428,0.006900,0.007475,0.006900,0.005428,0.003639,0.002078,0.001012,0.001771,0.003639,0.006370,0.009503,0.012080,0.013086,0.012080,0.009503,0.006370,0.003639,0.001771,0.002642,0.005428,0.009503,0.014176,0.018022,0.019523,0.018022,0.014176,0.009503,0.005428,0.002642,0.003359,0.006900,0.012080,0.018022,0.022910,0.024818,0.022910,0.018022,0.012080,0.006900,0.003359,0.003639,0.007475,0.013086,0.019523,0.024818,0.026885,0.024818,0.019523,0.013086,0.007475,0.003639,0.003359,0.006900,0.012080,0.018022,0.022910,0.024818,0.022910,0.018022,0.012080,0.006900,0.003359,0.002642,0.005428,0.009503,0.014176,0.018022,0.019523,0.018022,0.014176,0.009503,0.005428,0.002642,0.001771,0.003639,0.006370,0.009503,0.012080,0.013086,0.012080,0.009503,0.006370,0.003639,0.001771,0.001012,0.002078,0.003639,0.005428,0.006900,0.007475,0.006900,0.005428,0.003639,0.002078,0.001012,0.000492,0.001012,0.001771,0.002642,0.003359,0.003639,0.003359,0.002642,0.001771,0.001012,0.000492);
out vec4 FragData[4];
///function///
///main///
void main(void)
{
    vec3 DiffuseLighting;
    vec3 SpecularLighting;
    vec3 SurfaceNormal;
    float SurfaceSpecularPower;
    vec4 ret;
    vec3 ShadowedLightingWeight;
    vec4 outColor;
//##Float3AssignmentNode
{
    SurfaceNormal = vNormal;
}

//##FloatAssignmentNode
{
    SurfaceSpecularPower = 1.000000;
}

//##Shadow2DTestNode
{
    vec4 world_pos = vec4(vPosition.xyz, 1.0);
    world_pos = DirectionLight0_WorldMatrix * world_pos;
    world_pos = DirectionLight0_ProjMatrix * world_pos;
    world_pos /= world_pos.w;
    vec2 uv = world_pos.xy;
    uv = uv * 0.5 + vec2(0.5, 0.5);
    float bias = 0.01;
    if (uv.x < bias || uv.x > 1.0 - bias || uv.y < bias || uv.y > 1.0 - bias)
    {
        ShadowedLightingWeight = vec3(1.0f, 1.0f, 1.0f);
    }
    else
    {
        float depth = world_pos.z * 0.5 + 0.5;
        vec2 moments = texture(DirectionLight0_ShadowTexture, uv).rg;
        if (depth < moments.x)
        {
            ShadowedLightingWeight = vec3(1.0f, 1.0f, 1.0f);
        }
        else
        {
            float variance = moments.y - (moments.x * moments.x);
            variance = max(variance,0.000001);
            float d = depth - moments.x;
            float p_max = variance / (variance + d*d);
            ShadowedLightingWeight = vec3(p_max, p_max, p_max);
        }
    }
}

//##DirectionLightingNode
{
    vec3 realLightDir = -DirectionLight0_Dir;
    float d = dot(realLightDir, SurfaceNormal);
    d = clamp(d, 0.0, 1.0);
    vec3 c = DirectionLight0_Color.rgb * d;
    vec3 eye_dir = normalize(EyePos - vPosition.xyz);
    vec3 r = reflect(-realLightDir, SurfaceNormal);
    d = dot(r, eye_dir);
    d = clamp(d, 0.0, 1.0);
    vec3 s = pow(d, SurfaceSpecularPower) * DirectionLight0_Color.rgb;
    DiffuseLighting = vec3(0.000000, 0.000000, 0.000000) + c * ShadowedLightingWeight;
    SpecularLighting = vec3(0.000000, 0.000000, 0.000000) + s * ShadowedLightingWeight;
}

//##Shadow2DTestNode
{
    vec4 world_pos = vec4(vPosition.xyz, 1.0);
    world_pos = SpotLight0_WorldMatrix * world_pos;
    world_pos = SpotLight0_ProjMatrix * world_pos;
    world_pos /= world_pos.w;
    vec2 uv = world_pos.xy;
    uv = uv * 0.5 + vec2(0.5, 0.5);
    float bias = 0.01;
    if (uv.x < bias || uv.x > 1.0 - bias || uv.y < bias || uv.y > 1.0 - bias)
    {
        ShadowedLightingWeight = vec3(1.0f, 1.0f, 1.0f);
    }
    else
    {
        float depth = world_pos.z * 0.5 + 0.5;
        vec2 moments = texture(SpotLight0_ShadowTexture, uv).rg;
        if (depth < moments.x)
        {
            ShadowedLightingWeight = vec3(1.0f, 1.0f, 1.0f);
        }
        else
        {
            float variance = moments.y - (moments.x * moments.x);
            variance = max(variance,0.000001);
            float d = depth - moments.x;
            float p_max = variance / (variance + d*d);
            ShadowedLightingWeight = vec3(p_max, p_max, p_max);
        }
    }
}

//##SpotLightingNode
{
    vec3 c = vec3(0.0, 0.0, 0.0);
    vec3 s = vec3(0.0, 0.0, 0.0);
    float dist = length(vPosition.xyz - SpotLight0_Pos);
    vec3 realLightDir = normalize(vPosition.xyz - SpotLight0_Pos);
    dist = clamp(dist - SpotLight0_Influence, 0.0, SpotLight0_Influence);
    float l = 1.0 - dist / SpotLight0_Influence;
    float d = dot(normalize(SpotLight0_Dir), realLightDir);
    d = clamp(d, 0.0, 1.0);
    if (d > SpotLight0_OuterCosHalfAngle)
    {
        float weight = 0.0;
        if (d <= SpotLight0_InnerCosHalfAngle) {
            weight = 1.0 - (SpotLight0_InnerCosHalfAngle - d) / (SpotLight0_InnerCosHalfAngle - SpotLight0_OuterCosHalfAngle);
        }
        else {
            weight = 1.0f;
        }
        realLightDir = -realLightDir;
        d = dot(realLightDir, SurfaceNormal);
        d = clamp(d, 0.0, 1.0);
        c = SpotLight0_Color.rgb * d * weight;
        vec3 eye_dir = normalize(EyePos - vPosition.xyz);
        vec3 r = reflect(-realLightDir, SurfaceNormal);
        d = dot(r, eye_dir);
        d = clamp(d, 0.0, 1.0);
        s = pow(d, SurfaceSpecularPower) * SpotLight0_Color.rgb * weight;
    }
    DiffuseLighting = DiffuseLighting + c * ShadowedLightingWeight * l;
    SpecularLighting = SpecularLighting + s * ShadowedLightingWeight * l;
}

//##ShadowCubeTestNode
{
    vec3 ray_dir = vPosition.xyz - PointLight0_Pos;
    float depth = length(ray_dir);
    depth /= PointLight0_Influence;
    depth = clamp(depth, 0.0, 1.0);
    depth = depth * 0.5 + 0.5;
    ray_dir = normalize(ray_dir);
    vec2 moments = texture(PointLight0_ShadowTexture, ray_dir).rg;
    float bias = 0.01;
    if (depth < moments.x + bias)
    {
        ShadowedLightingWeight = vec3(1.0f, 1.0f, 1.0f);
    }
    else
    {
        float variance = moments.y - (moments.x * moments.x);
        variance = max(variance,0.005);
        float d = depth - moments.x;
        float p_max = variance / (variance + d*d);
        ShadowedLightingWeight = vec3(p_max, p_max, p_max);
    }
}

//##PointLightingNode
{
    vec3 c = vec3(0.0, 0.0, 0.0);
    vec3 s = vec3(0.0, 0.0, 0.0);
    float dist = length(vPosition.xyz - PointLight0_Pos);
    vec3 realLightDir = normalize(vPosition.xyz - PointLight0_Pos);
    realLightDir = -realLightDir;
    dist = clamp(dist - PointLight0_Influence, 0.0, PointLight0_Influence);
    float l = 1.0 - dist / PointLight0_Influence;
    float d = dot(realLightDir, SurfaceNormal);
    d = clamp(d, 0.0, 1.0);
    c = PointLight0_Color.rgb * d;
    vec3 eye_dir = normalize(EyePos - vPosition.xyz);
    vec3 r = reflect(-realLightDir, SurfaceNormal);
    d = dot(r, eye_dir);
    d = clamp(d, 0.0, 1.0);
    s = pow(d, SurfaceSpecularPower) * PointLight0_Color.rgb;
    DiffuseLighting = DiffuseLighting + c * ShadowedLightingWeight * l;
    SpecularLighting = SpecularLighting + s * ShadowedLightingWeight * l;
}

//##GaussianBlurMapNode
{
    float pixelWidth = 1.0f / tex0Res.x;
    float pixelHeight = 1.0f / tex0Res.y;
    if ( vTexCoord0.x < BlurryRadius * pixelWidth * 2.0f || vTexCoord0.x > 1.0f - pixelWidth * 2.0f ||
         vTexCoord0.y < BlurryRadius * pixelHeight * 2.0f || vTexCoord0.y > 1.0f - pixelHeight * 2.0f ) {
         ret = texture(tex0, vTexCoord0);
    }
    else if (BlurryRadius <= 1.0) {
        ret = texture(tex0, vTexCoord0);
    }
    else if (BlurryRadius > 1.0 && BlurryRadius <= 2.0) {
        vec4 color0 = texture(tex0, vTexCoord0);
        vec4 color1 = vec4(0, 0, 0, 0);
        float y = vTexCoord0.y - pixelHeight;
        for (int i = 0; i < 3; i++) {
            color1 += (texture( tex0, vec2(vTexCoord0.x - pixelWidth, y) ) * Gaussian3x3Const[i * 3 + 0]);
            color1 += (texture( tex0, vec2(vTexCoord0.x,              y) ) * Gaussian3x3Const[i * 3 + 1]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + pixelWidth, y) ) * Gaussian3x3Const[i * 3 + 2]);
            y += pixelHeight;
        }
        float scale1 = BlurryRadius - 1.0;
        float scale0 = 1.0 - scale1;
        ret = color0 * scale0 + color1 * scale1;
    }
    else if (BlurryRadius > 2.0 && BlurryRadius <= 3.0) {
        vec4 color0 = vec4(0, 0, 0, 0);
        float y = vTexCoord0.y - pixelHeight;
        for (int i = 0; i < 3; i++) {
            color0 += (texture( tex0, vec2(vTexCoord0.x - pixelWidth, y) ) * Gaussian3x3Const[i * 3 + 0]);
            color0 += (texture( tex0, vec2(vTexCoord0.x,              y) ) * Gaussian3x3Const[i * 3 + 1]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + pixelWidth, y) ) * Gaussian3x3Const[i * 3 + 2]);
            y += pixelHeight;
        }
        vec4 color1 = vec4(0, 0, 0, 0);
        y = vTexCoord0.y - 2.0 * pixelHeight;
        for (int i = 0; i < 5; i++) {
            color1 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 0]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 1]);
            color1 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian5x5Const[i * 5 + 2]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 3]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 4]);
            y += pixelHeight;
        }
        float scale1 = BlurryRadius - 2.0;
        float scale0 = 1.0 - scale1;
        ret = color0 * scale0 + color1 * scale1;
    }
    else if (BlurryRadius > 3.0 && BlurryRadius <= 4.0) {
        vec4 color0 = vec4(0, 0, 0, 0);
        float y = vTexCoord0.y - 2.0f * pixelHeight;
        for (int i = 0; i < 5; i++) {
            color0 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 0]);
            color0 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 1]);
            color0 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian5x5Const[i * 5 + 2]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 3]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian5x5Const[i * 5 + 4]);
            y += pixelHeight;
        }
        vec4 color1 = vec4(0, 0, 0, 0);
        y = vTexCoord0.y - 3.0 * pixelHeight;
        for (int i = 0; i < 7; i++) {
            color1 += (texture( tex0, vec2(vTexCoord0.x - 3.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 0]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 1]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 2]);
            color1 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian7x7Const[i * 7 + 3]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 4]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 5]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 3.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 6]);
            y += pixelHeight;
        }
        float scale1 = BlurryRadius - 3.0;
        float scale0 = 1.0 - scale1;
        ret = color0 * scale0 + color1 * scale1;
    }
    else if (BlurryRadius > 4.0 && BlurryRadius <= 5.0) {
        vec4 color0 = vec4(0, 0, 0, 0);
        float y = vTexCoord0.y - 3.0f * pixelHeight;
        for (int i = 0; i < 7; i++) {
            color0 += (texture( tex0, vec2(vTexCoord0.x - 3.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 0]);
            color0 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 1]);
            color0 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 2]);
            color0 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian7x7Const[i * 7 + 3]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 4]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 5]);
            color0 += (texture( tex0, vec2(vTexCoord0.x + 3.0 * pixelWidth, y) ) * Gaussian7x7Const[i * 7 + 6]);
            y += pixelHeight;
        }
        vec4 color1 = vec4(0, 0, 0, 0);
        y = vTexCoord0.y - 4.0f * pixelHeight;
        for (int i = 0; i < 9; i++) {
            color1 += (texture( tex0, vec2(vTexCoord0.x - 4.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 0]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 3.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 1]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 2]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 3]);
            color1 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian9x9Const[i * 9 + 4]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 5]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 6]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 3.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 7]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 4.0 * pixelWidth, y) ) * Gaussian9x9Const[i * 9 + 8]);
            y += pixelHeight;
        }
        float scale1 = BlurryRadius - 4.0;
        float scale0 = 1.0 - scale1;
        ret = color0 * scale0 + color1 * scale1;
    }
    else {
        vec4 color1 = vec4(0, 0, 0, 0);
        float y = vTexCoord0.y - 5.0f * pixelHeight;
        for (int i = 0; i < 11; i++) {
            color1 += (texture( tex0, vec2(vTexCoord0.x - 5.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 0]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 4.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 1]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 3.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 2]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 2.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 3]);
            color1 += (texture( tex0, vec2(vTexCoord0.x - 1.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 4]);
            color1 += (texture( tex0, vec2(vTexCoord0.x,                    y) ) * Gaussian11x11Const[i * 11 + 5]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 1.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 6]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 2.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 7]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 3.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 8]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 4.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 9]);
            color1 += (texture( tex0, vec2(vTexCoord0.x + 5.0 * pixelWidth, y) ) * Gaussian11x11Const[i * 11 + 10]);
            y += pixelHeight;
        }
        ret = color1;
    }
}

//##Float4AssignmentNode
{
    outColor = vec4(ret.rg, 0.000000, 1.000000);
}

FragData[0] = outColor;

}